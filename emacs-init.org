#+TITLE: Emacs Configuration
#+AUTHOR: David Jung
#+EMAIL: sungwonida@gmail.com

#+NAME: Note
#+BEGIN_SRC emacs-lisp
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------
#+END_SRC

* Emacs Configuration in an Org file
  I've declared Emacs config bankruptcy for the new year, and it couldn't have
  come at a better time. All at once there are a bunch of new tools for
  Emacs configuration: =use-package= (and =req-package=, used here) and
  =bind-key= simplify a lot of the annoying bits. Dependency management was hard
  before Emacs 24, but with these new tools we can vastly simplify the process.
  We even get a simpler keybinding mechanism in the bargain.

* Package Management with Pallet
  [[https://github.com/rdallasgray/pallet][Pallet]] is a wonderful little tool built on [[https://github.com/cask/cask][Cask]], a dependency management tool
  for Emacs packages. Pallet adds automatic updating of the =Caskfile= when
  packages are installed and deleted.

** Installing Cask
   Just run this command in your terminal of choice:

   #+NAME: Cask Installation
   #+BEGIN_SRC sh
     $ curl -fsSkL https://raw.github.com/cask/cask/master/go | python
   #+END_SRC

   then add =~/.cask/bin= to your =PATH= so that you can use =cask=.

** Creating a Caskfile
   For now, we just need a minimal =Cask= to get Pallet set up. Mine looks
   like this:

   #+NAME: Cask
   #+BEGIN_SRC emacs-lisp :tangle no
     (source gnu)
     (source melpa)
     
     (depends-on "pallet")
     (depends-on "req-package")
     (depends-on "moe-theme")
     (depends-on "evil")
   #+END_SRC

   Then run the following command in your =.emacs.d= directory to set up Pallet:

   #+NAME: Cask Initialization
   #+BEGIN_SRC sh
     cask install
   #+END_SRC

** Initialize Cask
   Finally, we add the following lines to our init file:

   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
   #+END_SRC

* Dependency Management with =req-package=
  [[https://github.com/edvorg/req-package][req-package]] is a wrapper on top of [[https://github.com/jwiegley/use-package][use-package]], a package dependency
  management tool. The documentation for =use-package= is immensely helpful for
  figuring out how to describe package dependencies and settings. =req-package=
  adds the =:require= keyword which allows us to define dependencies between
  related packages. 
** Initialize =req-package=
   With the preceding process complete, we just need to add the following line
   to our init file to begin using =req-package=:

   #+BEGIN_SRC emacs-lisp
     (require 'req-package)
     (setq custom-file "~/.emacs.d/custom.el")
     (load custom-file)
   #+END_SRC

* Keybindings with =bind-key=
  There are a number of ways to bind keys in Emacs, but I find
  =bind-key=, bundled with =use-package=, easier to work with and,
  more importantly, easier to read. =bind-key= takes a key sequence, a
  command, and an optional keymap.  =bind-key*= overrides any minor
  mode which sets the keybinding. =unbind-key= takes a key sequence
  and a keymap and removes that binding. Invoking
  =describe-personal-keybindings= prints a summary of your keybindings
  through =bind-key= and any overrides or conflicts. This is really
  the killer convenience of using =bind-key=.

* Evil
  I was a diehard Vim user for a long time, and I still prefer the Vim way of
  interacting with text. [[https://gitorious.org/evil/pages/Home][Evil]] is a (mostly feature-complete) Vim emulation mode
  for Emacs. It has sane defaults and I rarely find weirdness or lacking
  features.

** =evil=
   Here we have our first package with dependencies. Historically, I've had
   little annoyances when =evil= loads before =evil-leader=, so we'll make sure
   it gets loaded first. By default, =evil= uses its own cursor which shows up
   black regardless of face settings. Setting =evil-default-cursor= lets us use
   the cursor we're used to. I also redefine a couple of =ex= commands for
   convenience.

   #+BEGIN_SRC emacs-lisp
     (req-package evil
       :require (helm-config undo-tree evil-surround ace-jump-mode)
       :ensure evil
       :init
       (progn
         (setq evil-default-cursor t)
         (evil-mode 1)
         (setq evil-motion-state-modes
               (append evil-emacs-state-modes evil-motion-state-modes))
         (setq evil-emacs-state-modes '(magit-mode dired-mode)))
       :config
       (progn
         (evil-ex-define-cmd "e[dit]" 'helm-find-files)
         (evil-ex-define-cmd "b[uffer]" 'helm-buffers-list)
         (bind-key "[escape]" 'keyboard-escape-quit evil-normal-state-map)
         (bind-key "[escape]" 'keyboard-escape-quit evil-visual-state-map)
         (bind-key "<escape>" 'keyboard-escape-quit)
         (bind-key "\"" 'ace-jump-mode evil-normal-state-map)
         (evil-define-key 'normal
                          tern-mode-keymap "gd" 'tern-find-definition)))
   #+END_SRC

*** =evil-leader=
    =<leader>= is a really useful shorthand in Vim, and [[https://github.com/cofi/evil-leader][evil-leader]] brings the
    same facility to Evil. For really common commands, leader bindings can save
    those precious keystrokes.

    #+BEGIN_SRC emacs-lisp
      (req-package evil-leader
                   :require evil
                   :ensure evil-leader
                   :init
                   (progn
                     (evil-leader/set-leader "<SPC>")
                     (global-evil-leader-mode 1)
                     (evil-leader/set-key
                       "l" 'org-insert-link
                       "o" 'other-window
                       "d" 'delete-window
                       "D" 'delete-other-windows
                       "h" 'split-window-below
                       "v" 'split-window-right
                       "k" 'kill-buffer
                       "K" 'kill-buffer-and-window
                       "f" 'dired
                       "gs" 'magit-status)))
    #+END_SRC

*** =evil-numbers=
    One of the little Vim conveniences not found in vanilla Evil is incrementing
    and decrementing numbers with =C-a= and =C-x=, respectively, likely because
    these are already important bindings in Emacs. However, by limiting the
    effect to normal mode, we can use [[https://github.com/cofi/evil-numbers][evil-numbers]] to bring this functionality
    back without stomping all over existing bindings.

    #+BEGIN_SRC emacs-lisp
      (req-package evil-numbers
                   :require evil
                   :config
                   (progn
                     (bind-key "C-a" 'evil-numbers/inc-at-pt evil-normal-state-map)
                     (bind-key "C-x" 'evil-numbers/dec-at-pt evil-normal-state-map)))
    #+END_SRC

*** =evil-surround=
    Working with delimiter pairs is common enough that Tim Pope wrote a plugin
    to ease working with them in Vim, called [[https://github.com/tpope/vim-surround][vim-surround]]. [[https://github.com/timcharper/evil-surround][evil-surround]]
    emulates this functionality in =evil=. It's quite extensible, but the
    defaults seem to cover all my needs. Check out the README for some examples.

    #+BEGIN_SRC emacs-lisp
      (req-package evil-surround
                   :init (global-evil-surround-mode 1))
    #+END_SRC

*** =undo-tree=
    Standard Emacs undo is kind of confusing. [[http://www.dr-qubit.org/emacs.php#undo-tree][undo-tree]] replaces this with a
    simpler tree structure. It also allows us to visualize the tree directly.

    #+BEGIN_SRC emacs-lisp
      (req-package undo-tree
                   :diminish ""
                   :init
                   (progn
                     (setq undo-tree-auto-save-history t)
                     (global-undo-tree-mode)))    
    #+END_SRC
    
*** =ace-jump-mode=
    #+BEGIN_SRC emacs-lisp
      (req-package ace-jump-mode)
    #+END_SRC
* Helm 
  Coming from Vim, I was very used to the fuzzy matching of CtrlP. [[http://www.emacswiki.org/emacs/InteractivelyDoThings][Ido]] is a
  popular choice when one wishes to add this functionality to Emacs since it is
  built in and there is a fairly significant ecosystem built around it. I used
  Ido for a while, but after experimenting with [[https://github.com/emacs-helm/helm][Helm]], I've decided to migrate.
  Think of Helm as CtrlP for every minibuffer. From describing functions and
  variables to interacting with =org=, Helm covers just about anything.

** =helm=
   Helm offers a command called =helm-mini= that opens a =helm= buffer populated
   with recent files and currently open buffers. I want Helm everywhere, so
   instead we'll activate =helm-mode= and work from there.

   #+BEGIN_SRC emacs-lisp
     (req-package helm
       :config
       (helm-mode 1)
       (global-set-key (kbd "C-c h") 'helm-command-prefix)
       (global-unset-key (kbd "C-x c")))
     (req-package helm-config
       :require popwin
       :diminish (helm-mode . "")
       (progn
         (setq helm-ff-auto-update-initial-value)
         (setq popwin:special-display-config
               (append helm-popwin
                       popwin:special-display-config))
         (bind-key* "M-x" 'helm-M-x)
         (bind-key* "C-x C-f" 'helm-find-files)))
     (req-package helm-git)
     (req-package helm-git-files)
     (req-package helm-git-grep)
     (req-package helm-gtags)
     (define-key global-map (kbd "C-c h g") 'helm-git-grep-at-point)
     (define-key global-map (kbd "C-c h f") 'helm-git-files)
     (defun my-helm-gtags-mode-hook ()
       (helm-gtags-mode 1)
       (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
       (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-select)
       (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
       (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-find-rtag) ;helm-gtags-pop-stack
       (define-key helm-gtags-mode-map (kbd "C-c C-,") 'helm-gtags-previous-history)
       (define-key helm-gtags-mode-map (kbd "C-c C-.") 'helm-gtags-next-history))
     (add-hook 'dired-mode-hook 'helm-gtags-mode)
     (add-hook 'eshell-mode-hook 'helm-gtags-mode)
     (add-hook 'c-mode-common-hook 'my-helm-gtags-mode-hook)
     (add-hook 'c-mode-hook 'my-helm-gtags-mode-hook)
     (add-hook 'c++-mode-hook 'my-helm-gtags-mode-hook)
     #+END_SRC

** =popwin=
   The one annoying thing about =helm= is that the window it opens to show
   results is kinda huge. I use [[https://github.com/m2ym/popwin-el][popwin]] to limit the height of most of the
   Helm buffers.
   
   #+BEGIN_SRC emacs-lisp
     (req-package popwin
       (popwin-mode 1)
       (setq helm-popwin
             '(("*Helm Find Files*" :height 10)
               ("^\*helm.+\*$" :regexp t :height 10))))
   #+END_SRC

* Org
  #+BEGIN_SRC emacs-lisp
    (req-package org
      :config
      (progn
        (add-hook 'org-mode-hook
                  '(lambda ()
                     (setq mode-name " ꙮ ")))
        (bind-key* "C-c c" 'org-capture)
        (bind-key* "C-c l" 'org-store-link)
        (bind-key* "C-c a" 'org-agenda)
        (bind-key* "C-c b" 'org-iswitch)))
  #+END_SRC

* UI
  I'm pretty picky about how I want my editor to look, so there's a fair bit of
  configuration that goes here.

** Theme
   I've switched entirely to dark themes to make working with
   Structured Haskell Mode easier, and I like the colors of
   [[https://github.com/kuanyui/moe-theme.el][moe-theme]]. It's bright and has good default faces for most
   modes. It also has dark and light versions, which is convenient.
   
   I also advise =load-theme= to fully unload the previous theme
   before loading a new one.

   #+BEGIN_SRC emacs-lisp
     (defadvice load-theme 
       (before theme-dont-propagate activate)
       (mapc #'disable-theme custom-enabled-themes))

     (req-package moe-theme)

     (req-package moe-theme-switcher
       :require moe-theme)
   #+END_SRC

** Modeline
   Powerline is very popular in Vim (and with Evil users), but I much prefer
   [[https://github.com/Bruce-Connor/smart-mode-line][smart-mode-line]]. It's compatible with just about anything you can imagine,
   and it's easy to set up.

   
*** =smart-mode-line=
    #+BEGIN_SRC emacs-lisp
      (req-package smart-mode-line
                   :require nyan-mode
                   :init (sml/setup))    
    #+END_SRC

*** =nyan-mode=
    [[https://github.com/TeMPOraL/nyan-mode][nyan-mode]] is a goofy way to display one's location in a file.

    #+BEGIN_SRC emacs-lisp
      (req-package nyan-mode
               :init
               (progn
                 (nyan-mode)
                 (setq nyan-wavy-trail t))
               :config (nyan-start-animation))    
    #+END_SRC

*** =powerline=
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package powerline)
    #+END_SRC
    
** Faces
   #+BEGIN_SRC emacs-lisp
     (req-package faces
                  :config
                  (progn
                    (set-face-attribute 'default nil :family "DejaVu Sans Mono")
                    (set-face-attribute 'default nil :height 120)))   
   #+END_SRC

** Cleanup
   Who wants all that toolbars and scrollbars noise?
   
   #+BEGIN_SRC emacs-lisp
     (req-package scroll-bar
                  :config
                  (scroll-bar-mode -1))
     
     (req-package tool-bar
                  :config
                  (tool-bar-mode -1))
     
     (req-package menu-bar
                  :config
                  (menu-bar-mode -1))   
   #+END_SRC

   I also use [[http://www.emacswiki.org/emacs/DiminishedModes][diminish]] to clean up the modeline.

   #+BEGIN_SRC emacs-lisp
     (req-package diminish)
     
     (req-package server
                  :diminish (server-buffer-clients . ""))
   #+END_SRC

* IDE
  A few conveniences that I like to have in all my =prog-mode= buffers.

** Flycheck
   Flycheck has helped me write more programs than I'm totally
   comfortable admitting.
   
   #+BEGIN_SRC emacs-lisp
     (req-package flycheck
       :diminish (global-flycheck-mode . " ✓ ")
       :config
       (add-hook 'after-init-hook 'global-flycheck-mode))

     (req-package helm-flycheck
       :require flycheck
       :commands helm-flycheck
       :config
       (bind-key "C-c ! h"
                 'helm-flycheck
                 flycheck-mode-map))
   #+END_SRC

** Magit
   The only git wrapper that matters.

   #+BEGIN_SRC emacs-lisp
     (req-package magit
       :diminish magit-auto-revert-mode
       :config
       (define-key global-map (kbd "C-x v s") 'magit-status))
   #+END_SRC

** Line Numbers
;   #+BEGIN_SRC emacs-lisp
;     (req-package linum
;       :config
;       (add-hook 'prog-mode-hook
;                 '(lambda () (linum-mode 1))))   
;   #+END_SRC

*** Relative Line Numbers
    I was a little spoiled by this feature in Vim, and not having it
    just doesn't sit well with me.

    #+BEGIN_SRC emacs-lisp
      (req-package linum-relative
        :init (setq linum-relative-current-symbol ""))
    #+END_SRC

** Delimiters
   I like my delimiters matched and visually distinct. I used [[https://bitbucket.org/kovisoft/paredit][paredit]] for a
   long time, but I'm currently experimenting with [[https://github.com/Fuco1/smartparens][smartparens]]. As for the
   visual element, I quite like [[https://github.com/jlr/rainbow-delimiters][rainbow-delimiters]].

   #+BEGIN_SRC emacs-lisp
     (req-package smartparens-config
       :ensure smartparens
       :diminish (smartparens-mode . "()")
       :init (smartparens-global-mode t))

     (req-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC

** Colors
   I've had to work with colors in a fair bit of code, so having them displayed
   in buffer is convenient.

   #+BEGIN_SRC emacs-lisp
     (req-package rainbow-mode
       :diminish (rainbow-mode . "")
       :config (add-hook 'prog-mode-hook 'rainbow-mode))
   #+END_SRC
   
   There's also an interesting mode for uniquely coloring identifiers in code
   so that they are easy to scan for. It's still a bit iffy, but it's fun to
   try.

   #+BEGIN_SRC emacs-lisp
     (req-package color-identifiers-mode
       :diminish (color-identifiers-mode . "")
       :init
       (setq color-identifiers:num-colors 50)
       :config
       (progn
         (add-hook 'emacs-lisp-mode-hook 'color-identifiers-mode)
         (add-hook 'ruby-mode-hook 'color-identifiers-mode)))
   #+END_SRC
 
** Completion
   #+BEGIN_SRC emacs-lisp
     (req-package auto-complete-config
       :ensure auto-complete
       :init
       (progn
         (ac-config-default)
         (setq ac-auto-start 3))
       :config
       (progn
         (require 'ac-math)
         (require 'auto-complete-auctex)))
   #+END_SRC

** Tags
   #+BEGIN_SRC emacs-lisp
     (req-package ggtags
       :config
;       (add-hook 'prog-mode-hook
;                 (lambda ()
;                   (when (derived-mode-p
;                          'c-mode
;                          'c++-mode
;                          'python-mode
;                          'java-mode
;                          'asm-mode)
;                     (progn
;                       (ggtags-mode)))))
       (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags))
   #+END_SRC

** Grepping
   Except really I'm =ag=ging.
   #+BEGIN_SRC emacs-lisp
     (req-package helm-ag
       :require evil-leader)
   #+END_SRC

* Languages
** Haskell
   #+BEGIN_SRC emacs-lisp
     (req-package haskell-mode
       :require (flycheck flycheck-haskell)
       :commands haskell-mode
       :init
       (add-to-list 'auto-mode-alist '("\\.l?hs$" . haskell-mode))
       :config
       (progn
         (req-package inf-haskell)
         (req-package hs-lint)
         (bind-key "C-x C-d" nil haskell-mode-map)
         (bind-key "C-c C-z" 'haskell-interactive-switch haskell-mode-map)
         (bind-key "C-c C-l" 'haskell-process-load-file haskell-mode-map)
         (bind-key "C-c C-b" 'haskell-interactive-switch haskell-mode-map)
         (bind-key "C-c C-t" 'haskell-process-do-type haskell-mode-map)
         (bind-key "C-c C-i" 'haskell-process-do-info haskell-mode-map)
         (bind-key "C-c M-." nil haskell-mode-map)
         (bind-key "C-c C-d" nil haskell-mode-map)
         (defun my-haskell-hook ()
           (setq mode-name " λ ")
           (turn-on-haskell-doc)
           (diminish 'haskell-doc-mode "")
           (capitalized-words-mode)
           (diminish 'capitalized-words-mode "")
           (turn-on-eldoc-mode)
           (diminish 'eldoc-mode "")
           (turn-on-haskell-decl-scan)
           (setq evil-auto-indent nil))
         (setq haskell-font-lock-symbols 'unicode)
         (setq haskell-literate-default 'tex)
         (setq haskell-stylish-on-save t)
         (setq haskell-tags-on-save t)
         (add-hook 'haskell-mode-hook 'my-haskell-hook)))

     (req-package flycheck-haskell
       :config (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))
   #+END_SRC
*** Structured Haskell Mode
    #+BEGIN_SRC emacs-lisp
      (req-package shm
                   :require haskell-mode
                   :commands structured-haskell-mode
                   :init (add-hook 'haskell-mode-hook
                                   'structured-haskell-mode))
    #+END_SRC

*** ghc-mod
    #+BEGIN_SRC emacs-lisp
      (req-package ghc
        :init (add-hook 'haskell-mode-hook (lambda () (ghc-init))))
    #+END_SRC

** Emacs Lisp
   #+BEGIN_SRC emacs-lisp
     (req-package lisp-mode
       :init
       (add-hook 'emacs-lisp-mode-hook
                 (lambda ()
                   (setq mode-name " ξ ")))) 
   #+END_SRC

** LaTeX
   All you need is AUCTeX, end of story.

   #+BEGIN_SRC emacs-lisp
     (req-package tex-site
       :require auto-complete-config
       :ensure auctex)

     (req-package ac-math
       :require auto-complete-config)

     (req-package auto-complete-auctex
       :require auto-complete-config)
   #+END_SRC
 
** R
   #+BEGIN_SRC emacs-lisp
     (req-package ess-site
       :ensure ess)
   #+END_SRC

** Idris
   #+BEGIN_SRC emacs-lisp
     (req-package idris-mode)
   #+END_SRC
   
** PHP/Drupal
   [[https://github.com/arnested/drupal-mode][drupal-mode]] has [[https://github.com/ejmr/php-mode][php-mode]] as a dependency, so we could conceivably
   get away with just including the former here, but just in case we
   want a bit more control or we decide that =drupal-mode= isn't worth
   it, we'll make separate =req-package= blocks.
;   #+BEGIN_SRC emacs-lisp
;     (req-package php-mode
;       :init (setq php-template-compatibility nil))
;
;     (req-package web-mode)
;
;     (req-package drupal-mode
;       :require (php-mode ggtags))
;   #+END_SRC

** Javascript
   #+BEGIN_SRC emacs-lisp
     (req-package tern
       :require tern-auto-complete
       :init
       (progn
         (add-hook 'js-mode-hook
                   (lambda ()
                     (tern-mode t))))
       :config
       (progn
         (tern-ac-setup)))

     (req-package tern-auto-complete)
   #+END_SRC

* Annoyances
  Fixing a couple of gripes I have with Emacs.

** Exec path
   #+BEGIN_SRC emacs-lisp
     (req-package exec-path-from-shell
       :init
       (when (memq window-system '(mac ns))
         (exec-path-from-shell-initialize)))
   #+END_SRC

** Backups and Autosave Files
   These things end up everywhere, so let's stick them all in a temporary
   directory.

   #+BEGIN_SRC emacs-lisp
     (req-package files
       :init
       (progn
         (setq backup-directory-alist
               `((".*" . ,temporary-file-directory)))
         (setq auto-save-file-name-transforms
               `((".*" ,temporary-file-directory t)))))
   #+END_SRC

** Questions
   Keep it short.

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Customizations
   [[http://www.emacswiki.org/emacs/cus-edit%2B.el][cus-edit+]] is a really handy way to keep your customizations up to
   date, especially if you set your =custom-file=.

   #+BEGIN_SRC emacs-lisp
     (req-package cus-edit+
       :init (customize-toggle-outside-change-updates))
   #+END_SRC

* swjung
** faces
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(font . "NanumGothicCoding-10"))
     (add-to-list 'default-frame-alist '(line-spacing . 2))
     (set-fontset-font "fontset-default" '(#x1100 . #xffdc) '("나눔고딕코딩" . "unicode-bmp"))
     (set-language-environment '"Korean")
     (prefer-coding-system 'utf-8)
     (setq x-select-enable-clipboard t)
     (setq interprogram-paste-function 'x-selection-value)
     (setq font-lock-comment-face 'italic)
     (set-face-foreground 'italic "gray50")
     (add-to-list 'load-path "~/.emacs.d/packages")
     (setq scroll-step 1)
     ;(fset 'yes-or-no-p 'y-or-n-p)
     (setq inhibit-startup-message t)
     ;(local-set-key (kbd "M-C-g") 'org-plot/gnuplot)
     
     (defun jm-ndic (word)
     "search WORD in endic.naver.com"
     (interactive
     (list (let* ((wd (current-word))
     (word (read-string
     (format "Dict what (default `%s'): " wd))))
     (if (string= "" word) wd word))))
     ;  (browse-url (concat "http://dic.naver.com/search.naver?query=" word)
     (browse-url (concat "http://endic.naver.com/popManager.nhn?sLn=kr&m=search&searchOption=&query=" word)
     ))
     
     (define-key global-map [(control x) (j)] 'jm-ndic)
     
     (setq ibuffer-saved-filter-groups
     '(("default"
     ("Dired" (mode . dired-mode))
     ("TODO" (filename . "todo.org"))
     ("Notes" (or
     (mode . org-mode)
     (filename . ".org")))
     ("Development (Fermion / Muon)" (filename . "Development/cs/"))
     ("Coding stuffs" (or
     (mode . c-mode)
     (mode . c++-mode)
     (mode . python-mode)
     (mode . shell-script-mode)
     (mode . sh-mode)
     ))
     ("Emacs" (or
     (filename . ".emacs")
     (name . "^\\*scratch\\*$")
     (name . "^\\*Messages\\*$")
     (name . "^\\*eshell\\*$")
     (mode . Custom-mode)))
     ("Help" (or
     (mode . Man-mode)
     (mode . Info-mode)
     (mode . Help-mode)
     (mode . help-mode)
     (name . "^\\*Help*\\*$"))))))
     (setq ibuffer-expert t)
     (add-hook 'ibuffer-mode-hook
     (lambda ()
     (ibuffer-auto-mode 1)
     (ibuffer-switch-to-saved-filter-groups "default")))
     (eval-after-load "ibuffer"
     '(define-key ibuffer-mode-map (kbd "* f") 'ibuffer-mark-by-file-name-regexp))
     
     (define-key global-map (kbd "\C-x \C-b") 'helm-buffers-list)
   #+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "C-z") 'evil-mode)
   #+END_SRC
** muon
   #+BEGIN_SRC emacs-lisp
     (defun build-muon ()
       "build-muon"
       (interactive)
       (compile "cd /home/swjung/Development/cs/muon/ && ./build_csfp.sh --enable_encrypt")
     )
     
     (defun build-muon-debug ()
       "build-muon-debug"
       (interactive)
       (compile "cd /home/swjung/Development/cs/muon/ && ./build_csfp.sh --enable_encrypt --debug")
     )
     
     (defun build-muon-image-stitcher ()
       "build-muon-image-stitcher"
       (interactive)
       (compile "cd /home/swjung/Development/cs/muon/ && ./build_csfp.sh --enable_encrypt --build_image_stitcher")
     )
     
     (defun build-muon-image-stitcher-debug ()
       "build-muon-image-stitcher-debug"
       (interactive)
       (compile "cd /home/swjung/Development/cs/muon/ && ./build_csfp.sh --enable_encrypt --build_image_stitcher --debug")
     )
     
     (defun build-muon-android ()
       "build-muon-android"
       (interactive)
     ;  (compile "cd /home/swjung/Development/cs/muon/ && ./build_csfp.sh --spec android_aarch64-linux-android-4.9_m64_arm64-v8a.spec --library_type shared --enable_encrypt")
     (compile "cd /home/swjung/Development/cs/muon/ && ./build_csfp.sh --spec android_arm-linux-androideabi-4.6_m32_armeabi-v7a.spec --library_type shared --enable_encrypt")
     )
     
     (defun cp-libs-for-android ()
       "cp-libs-for-android"
       (interactive)
       (start-process-shell-command "cp-libs-for-android" "*cp-libs-for-android*" "/home/swjung/Development/cs/muon/localutil/cp_libs_for_android.sh")
     )
     
     (defun build-csfp-gui ()
       "build-csfp-gui"
       (interactive)
       (start-process-shell-command "cp-libs-for-android" "*build-csfp-gui*" "cd /home/swjung/Development/cs/csfp_gui/gui && ./make_gui.sh --ix11094a --muon --cp --build --install")
       (message "csfp-gui build done.")
     )
     
     (defun clean-muon ()
       "Clean muon for the PC."
       (interactive)
       (message "Clearing muon compilation environment (PC)..")
       (start-process-shell-command "clean-muon" "*clean build*" "cd /home/swjung/Development/cs/muon && ./build_csfp.sh dist-clean")
       (message "Clean done.")
     )
     
     (defun run-muon (mode train query)
       "Run muon with interative argument"
       (interactive
        (list (let* ((dm "ipmerge")
     				(mode (read-string 
     					   (format "mode (default `%s'): " dm))))
     		   (if (string= "" mode) dm mode))
     		 (let* ((dt "~/Development/cs/muon/img/l0_00.bmp")
     				(train (read-string 
     						(format "train path (default `%s'): " dt))))
     		   (if (string= "" train) dt train))
     		 (let* ((dq "~/Development/cs/muon/img/l0_01.bmp")
     				(query (read-string 
     						(format "query path (default `%s'): " dq))))
     		   (if (string= "" query) dq query))
     		 )
     ;		 (if (string= "fenrol" mode)
     ;			 (let* ((dq1 "~/Development/cs/muon/img/l0_02.bmp")
     ;					(query1 (read-string 
     ;							(format "another query path (default `%s'): " dq1))))
     ;			   (if (string= "" query1) dq1 query1)))
     ;		 ))
      ; (if (= mode (string fenrol)) 
     ;	  (async-shell-command (concat "cd ~/Development/cs/muon/ && ./csfp" " -m " mode " " train " " query " " query1) "muon-execution"))
        )
       (async-shell-command (concat "cd ~/Development/cs/muon/ && ./csfp" " -m " mode " " train " " query) "muon-execution")
       )
     
     (defun build-muon-board ()
       "Build muon for the board."
       (interactive)
       (message "Building muon (board)..")
       (compile "cd /home/swjung/Development/cs/muon/stm32f4 && make")
     )
     
     (defun clean-muon-board ()
       "Clean muon for the board."
       (interactive)
       (message "Clearing muon compilation environment (board)..")
       (start-process-shell-command "clean-muon" "*clean build*" "cd /home/swjung/Development/cs/muon/stm32f4 && make clean")
       (message "Clean done.")
     )
     
     (defun flash-muon ()
       "Flash muon into the board."
       (interactive)
       (message "Flashing muon.bin to connected STM32 board..")
       (async-shell-command "st-flash write /home/swjung/Development/cs/muon/stm32f4/muon.bin 0x8000000" "flash_m4"))
     
     (defun start-st-link-server ()
       "Start ST-Link server."
       (interactive)
       (message "Starting ST-Link server..")
       (async-shell-command "st-util" "debug-server"))
     
     (defun debug-muon-board ()
       "Debug muon for the board using GDB."
       (interactive)
       (async-shell-command "arm-none-eabi-gdb /home/swjung/Development/cs/muon/stm32f4/muon.elf" "gdb-muon")
     )
     
     ;(define-key global-map [(f10)] 'run-muon)
     (define-key global-map [(f11)] 'clean-muon)
     (define-key global-map [(f12)] 'build-muon)
     (define-key global-map [(f9)] 'build-muon-debug)
     (define-key global-map [(f7)] 'build-muon-image-stitcher)
     (define-key global-map [(f8)] 'build-muon-image-stitcher-debug)
     (define-key global-map [(f4)] 'build-muon-android)
     (define-key global-map [(f5)] 'cp-libs-for-android)
     (define-key global-map [(f6)] 'build-csfp-gui)
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (req-package company
       (add-hook 'after-init-hook 'global-company-mode)
       (defun my-company-mode-hook ()
         (define-key company-mode-map [backtab] 'company-complete))
       (add-hook 'company-mode-hook 'my-company-mode-hook))
   #+END_SRC
** redo
   #+BEGIN_SRC emacs-lisp
     (req-package redo+
       (global-set-key [(control .)] 'redo))
   #+END_SRC
** insert-date
   #+BEGIN_SRC emacs-lisp
     (defun insert-date ()
       "Insert date at point."
       (interactive)
       (insert (format-time-string "%Y-%m-%d %a %p %l:%M")))
   #+END_SRC
** TAGS creating
   #+BEGIN_SRC emacs-lisp
     (defvar c-files-regex ".*\\.\\(c\\|cpp\\|h\\|hpp\\)"
       "A regular expression to match any c/c++ related files under a directory")
     (defun my-semantic-parse-dir (root regex)
       "
        This function is an attempt of mine to force semantic to
        parse all source files under a root directory. Arguments:
        -- root: The full path to the root directory
        -- regex: A regular expression against which to match all files in the directory
       "
       (let (
             ;;make sure that root has a trailing slash and is a dir
             (root (file-name-as-directory root))
             (files (directory-files root t ))
            )
         ;; remove current dir and parent dir from list
         (setq files (delete (format "%s." root) files))
         (setq files (delete (format "%s.." root) files))
         ;; remove any known version control directories
         (setq files (delete (format "%s.git" root) files))
         (setq files (delete (format "%s.hg" root) files))
         (while files
           (setq file (pop files))
           (if (not(file-accessible-directory-p file))
               ;;if it's a file that matches the regex we seek
               (progn (when (string-match-p regex file)
                        (save-excursion
                          (semanticdb-file-table-object file))
                ))
               ;;else if it's a directory
               (my-semantic-parse-dir file regex)
           )
          )
       )
     )
      
     (defun my-semantic-parse-current-dir (regex)
       "
        Parses all files under the current directory matching regex
       "
       (my-semantic-parse-dir (file-name-directory(buffer-file-name)) regex)
     )
      
     (defun create-tags-curdir ()
       "
        Parses all the c/c++ related files under the current directory
        and inputs their data into semantic
       "
       (interactive)
       (my-semantic-parse-current-dir c-files-regex)
     )
      
     (defun create-tags (dir)
       "Prompts the user for a directory and parses all c/c++ related files
        under the directory
       "
       (interactive (list (read-directory-name "Provide the directory to search in:")))
       (my-semantic-parse-dir (expand-file-name dir) c-files-regex)
     )
   #+END_SRC

** Dired Enhancements
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "dired"
       '(progn
          (defadvice dired-advertised-find-file (around dired-subst-directory activate)
            "Replace current buffer if file is a directory."
            (interactive)
            (let* ((orig (current-buffer))
                   ;; (filename (dired-get-filename))
                   (filename (dired-get-filename t t))
                   (bye-p (file-directory-p filename)))
              ad-do-it
              (when (and bye-p (not (string-match "[/\\\\]\\.$" filename)))
                (kill-buffer orig))))))

     (defun mydired-sort ()
       "Sort dired listings with directories first."
       (save-excursion
         (let (buffer-read-only)
           (forward-line 2) ;; beyond dir. header 
           (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
         (set-buffer-modified-p nil)))
     
     (defadvice dired-readin
       (after dired-after-updating-hook first () activate)
       "Sort dired listings with directories first before adding marks."
       (mydired-sort))
     
     (add-hook 'dired-mode-hook
               (function (lambda ()
     		      (load "dired-x")
                           ;; Set dired-x buffer-local variables here.  For example:
                           (setq dired-omit-files-p t)
     		      (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..+$")
     		      (setq dired-omit-extensions '("~"))
                           )))
     
     (defun my-dired-mode-hook ()
       (define-key dired-mode-map [backspace] 'dired-up-directory))
     (add-hook 'dired-mode-hook 'my-dired-mode-hook)
   #+END_SRC
** CEDET
   #+BEGIN_SRC emacs-lisp
     (req-package cedet)
   #+END_SRC
** EAssist
   #+BEGIN_SRC emacs-lisp
     (req-package eassist
       (global-set-key [(meta return)] 'semantic-complete-analyze-inline)
       (global-ede-mode 1)
       (defun my-c-mode-common-hook ()
         (define-key c-mode-base-map (kbd "M-o") 'eassist-switch-h-cpp)
         (define-key c-mode-base-map (kbd "M-m") 'eassist-list-methods))
       (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
       (defun my-python-mode-hook ()
         (define-key python-mode-map (kbd "M-m") 'eassist-list-methods))
       (add-hook 'python-mode-hook 'my-python-mode-hook)
       (define-key lisp-mode-shared-map (kbd "M-m") 'eassist-list-methods))
   #+END_SRC
** Hide Show
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook
               (lambda()
                 (hs-minor-mode t)
                 (local-set-key (kbd "C-c u") 'hs-toggle-hiding)
                 (local-set-key (kbd "C-c <down>") 'hs-hide-all)
                 (local-set-key (kbd "C-c <up>") 'hs-show-all)))
   #+END_SRC
** Ido
;   #+BEGIN_SRC emacs-lisp
;     (req-package ido-vertical-mode
;       (ido-mode t)
;       (setq ido-vertical-define-keys 'C-n-and-C-p-only)
;       (setq ido-vertical-show-count t)
;       (setq ido-use-faces t)
;       (set-face-attribute 'ido-vertical-first-match-face nil
;                           :background nil
;                           :foreground "orange")
;       (set-face-attribute 'ido-vertical-only-match-face nil
;                           :background nil
;                           :foreground nil)
;       (set-face-attribute 'ido-vertical-match-face nil
;                           :foreground nil)
;       (ido-vertical-mode t))
;   #+END_SRC
** c-highlight
   #+BEGIN_SRC emacs-lisp
     (defun cpp-highlight-if-0/1 ()
       "Modify the face of text in between #if 0 ... #endif."
       (interactive)
       (setq cpp-known-face 'default)
       (setq cpp-unknown-face 'default)
       (setq cpp-face-type 'dark)
       (setq cpp-known-writable 't)
       (setq cpp-unknown-writable 't)
       (setq cpp-edit-list
             '((#("1" 0 1
                  (fontified nil))
                nil
                (foreground-color . "dim gray")
                both nil)
               (#("0" 0 1
                  (fontified nil))
                (foreground-color . "dim gray")
                nil
                both nil)))
       (cpp-highlight-buffer t))
     (defun jpk/c-mode-hook ()
       (cpp-highlight-if-0/1)
       (add-hook 'after-save-hook 'cpp-highlight-if-0/1 'append 'local))
     (add-hook 'c-mode-common-hook 'jpk/c-mode-hook)
   #+END_SRC
** Easier Transition between Windows
   #+BEGIN_SRC emacs-lisp
     ;  M-up, M-down, M-left, and M-right keys.  
     (windmove-default-keybindings 'meta)
     
     ;; Spawning Window
     (fset 'spawn-window-right
           (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 49 24 51 M-left] 0 "%d")) arg)))
     (fset 'spawn-window-left
           (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 49 24 51 M-right] 0 "%d")) arg)))
     (fset 'spawn-window-down
           (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 49 24 50 M-down] 0 "%d")) arg)))
     (fset 'spawn-window-up
           (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 49 24 50 M-up] 0 "%d")) arg)))
     (define-key global-map [(control right)]  'spawn-window-left)
     (define-key global-map [(control left)]  'spawn-window-right)
     (define-key global-map [(control down)]  'spawn-window-down)
     (define-key global-map [(control up)]  'spawn-window-up)
   #+END_SRC
** Notes
   #+BEGIN_SRC emacs-lisp
     (defun notes ()
       "Switch to my notes dir."
       (interactive)
       (find-file "~/Notes"))
   #+END_SRC
** hook adjustment
   #+BEGIN_SRC emacs-lisp
     (setq dired-mode-hook (remove 'drupal-mode-bootstrap dired-mode-hook))
   #+END_SRC
** Last History
   #+BEGIN_SRC emacs-lisp
     (define-key global-map [(control x)(control r)]  'recentf-open-files)
     (recentf-open-files)
   #+END_SRC
* Fulfill Requirements
  At long last we need only call the following function to send =req-package= on
  its merry way.

  #+BEGIN_SRC emacs-lisp
    (req-package-finish)
  #+END_SRC

